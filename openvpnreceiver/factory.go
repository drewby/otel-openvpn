// The factory for the openvpnreceiver receiver. The factory is called
// by the collector to create new instances of the receiver.

package openvpnreceiver

import (
	"context"
	"errors"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/consumer"
	"go.opentelemetry.io/collector/receiver"
	"go.opentelemetry.io/collector/receiver/scraperhelper"
	"go.uber.org/zap"

	"github.com/drewby/openvpnreceiver/internal/metadata"
)

var errInvalidConfig = errors.New("invalid config for openvpnreceiver")

// Creates the factory for the openvpnreceiver receiver.
// This is called by the collector. It is called only once.
// We call receiver.NewFactory with the following parameters:
//
// - the type of the receiver (from metadata.yaml)
// - a function that creates the default configuration
// - a function that creates a new metrics receiver
//
// A reveiver can also handles Traces and Logs, but
// we only handle Metrics here.
func NewFactory() receiver.Factory {
	return receiver.NewFactory(
		metadata.Type,
		createDefaultConfig,
		receiver.WithMetrics(CreateOpenvpnReceiver, component.StabilityLevelDevelopment),
	)
}

// Creates our new Metrics receiver to record OpenVPN status. The
// collector passes the following parameters:
//
// - the context
// - the settings
// - the configuration
// - the consumer (the next component in the pipeline)
func CreateOpenvpnReceiver(
	_ context.Context,
	settings receiver.CreateSettings,
	cc component.Config,
	consumer consumer.Metrics,
) (receiver.Metrics, error) {
	cfg, ok := cc.(*Config)
	if !ok {
		return nil, errInvalidConfig
	}

	// NewMetricsBuilder is generated by mdatagen based on the
	// contents of metadata.yaml.
	metricsBuilder := metadata.NewMetricsBuilder(cfg.MetricsBuilderConfig, settings)

	// Create a new scraper to scrape the OpenVPN status.
	ns := newScraper(metricsBuilder, cfg.Path, settings.Logger)

	// Use scraperhelper to create a new scraper controller receiver. Pass
	// the type of the receiver (from metadata.yaml), and the function
	// to call for each scrape.
	scraper, err := scraperhelper.NewScraper(metadata.Type, ns.scrape)
	if err != nil {
		settings.Logger.Error("Failed to create new scraper helper", zap.Error(err))
		return nil, err
	}

	// Return the new scraper controller receiver. ScraperControllerSettings
	// is a struct that contains the scrape interval from the receiver
	// configuration.
	return scraperhelper.NewScraperControllerReceiver(
		&cfg.ScraperControllerSettings,
		settings,
		consumer,
		scraperhelper.AddScraper(scraper))
}
